import pytest


@pytest.mark.parametrize(
    argnames='rank, height_add, expected_number',
    argvalues=[
        ('165 163 160 160 157 157 155 154', '162', 3),
        ('165 163 160 160 157 157 155 154', '160', 5),
        ('39 35 32 32 31 28 28 27 25 24 20 16 16 12 10', '40', 1),
        ('36 34 34 34 34 31 31 29 25 22 19 17 16 14 14 11', '19', 12),
        ('105 105 104 101 98 96 96 92 89 88 84 82 82 80 77 73 73 72 70 66 65 62 61 61 61 58 56 56 53 53 49 48 46 44 43 43 43 42 42 41 41 39 38 34 31 28 25 22 21 20 16 14', '108', 1),
        ('182 182 181 179 175 174 172 172 171 171 168 166 162 161 159 155 154 152 150 150 149 147 146 145 145 143 143 139 138 136 133 133 132 132 129 126 124 121 121 119 116 113 112 110 108 106 103 103 102 99 95 95 94 93 89 87 84 82 78 76 73 72 69 67 67 66 64 64 64 62 60 58 54 54 53 53 52 52 50 48 47 44 42 42 38 34 33 32 28 24 24 22 18', '183', 1),
        ('151 149 148 148 146 142 142 141 139 137 135 132 132 130 129 126 123 123 123 121 121 121 117 115 113 112 112 111 111 111 111 107 104 101 97 93 90 90 88 88 87 83 82 79 79 77 73 73 72 70 67 65 64 61 60 60 59 55 55 54 52 51 47 47 43 41 39 37 35 31 28 25 23 23 22 19', '117', 24),
        ('118 117 115 115 113 112 112 108 106 104 100 99 95 92 90 87 85 84 81 79 75 72 71 70 66 63 62 59 59 59 59 59 55 55 55 54 53 51 49 48 48 47 44 40 40 38 36 32 31 30 28 27 26 24 20 19', '86', 17),
        ('106 105 105 102 98 98 98 96 93 92 91 91 90 87 83 80 77 74 70 68 68 65 63 59 59 56 52 51 50 47 46 43 41 37 33 31 29 28 27 27 24 24 23 23 22 19', '10', 47),
        ('167 165 161 158 158 158 154 152 148 146 142 142 140 140 139 137 133 132 130 130 129 128 128 124 120 120 116 114 114 110 107 104 102 99 99 95 92 91 89 87 87 84 80 78 74 73 71 70 68 66 62 60 58 57 56 52 49 48 48 45 45 41 40 39 37 33 33 33 29 25 21 17 17', '35', 66),
        ('194 194 193 191 188 187 187 185 183 182 178 176 176 172 168 165 163 160 156 152 150 148 148 147 146 146 143 140 138 136 132 129 127 125 125 124 123 123 119 116 114 112 110 110 106 102 99 95 95 92 89 86 82 82 79 79 77 73 73 70 70 70 66 65 65 63 62 60 58 58 55 55 51 47 47 47 44 42 39 36 36 34 31 31 31 28 28 27 27 23 21 19 16 14 13 11', '94', 50),
        ('1', '1', 2),
        ('1', '2', 1)
    ]
)
def test_rank(rank, height_add, expected_number):
    rank_list = [int(height) for height in rank.split(sep=' ')]
    height_to_insert = int(height_add)
    index_to_paste = len(rank_list)  # assume all numbers are higher, append to the end of the list in that case

    for i in range(len(rank_list)):
        height = rank_list[i]
        if height < height_to_insert:
            index_to_paste = i
            break

    # shift by 1 because indexes in lists start with 0, but in ranks people are numbered starting with 1
    number_in_rank = index_to_paste + 1

    assert expected_number == number_in_rank
